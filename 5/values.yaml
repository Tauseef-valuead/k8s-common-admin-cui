#######################################################
## DEFAULT VALUES File
#######################################################
volumes:
    volumeHandle: fs-2ff7d46e
    efsVolumePath: efs
    wordpressUploadsPath: /var/www/html/wp-content/uploads
lms:
  image:
    repository: api.ecr.ap-southeast-1.amazonaws.com/valuead/lms
    tag: 7.27.0-ABE_137-RC2-b237
  localization: en_US
  prod:
    resources:
      limits:
        memory: "2000Mi"
        cpu: "500m"
      requests:
        memory: "1000Mi"
        cpu: "100m"
  uat:
    resources:
      limits:
        memory: "1000Mi"
        cpu: "500m"
      requests:
        memory: "1000Mi"
        cpu: "100m"
cui:
  image:
    repository: api.ecr.ap-southeast-1.amazonaws.com/valuead/cui
    tag: 3.2.0-b20


pentaho:
  image:
    repository: api.ecr.ap-southeast-1.amazonaws.com/valuead/pentaho
    tag: 3.0-RC1-b172
  pre:
    image:
      repository: awsassembly/pentaho-pre-deploy
      tag: production
  customization:
    image:
      repository:
      tag:
    serverusername:
    serverpassword:
    resources:
        limits:
          memory: "500Mi"
          cpu: "1000m"
        requests:
          memory: "300Mi"
          cpu: "600m"
  localization:
    image:
      repository: api.ecr.ap-southeast-1.amazonaws.com/valuead/pentaho-localization
      tag: 1.0.0
    serverusername: MarkS
    serverpassword: beb6on4cey
  resources:
      limits:
        memory: "2500Mi"
        cpu: "2"
      requests:
        memory: "2500Mi"
        cpu: "500m"

kafkadeploy:
  image:
    repository: api.ecr.ap-southeast-1.amazonaws.com/valuead/k8s-kafka-pipelines
    tag: 2.0.0-rc11-b130
  kafka:
    pipeline_tag: 2.0.0-rc11-b130
  liquibase:
    repository: api.ecr.ap-southeast-1.amazonaws.com/valuead/k8s-dw-kafka-liquibase-init
    tag: 2.0.0-rc11-b130
  job:
    task: install

adminui20:
  image:
    repository: 744687221383.dkr.ecr.ap-southeast-1.amazonaws.com/k8s-admin20-ui
    tag: 1.0.0-RC1-b11

ingress:
  ## Set to true to enable ingress record generation
  enabled: false

  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  rootDomain: value-ad.com
  environment: test
  hosts:
  - name: wordpress.local

    ## Set this to true in order to enable TLS on the ingress record
    ## A side effect of this will be that the backend wordpress service will be connected at port 443
    tls: false

    ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
    tlsSecret: wordpress.local-tls

    ## Ingress annotations done as key:value pairs
    ## If you're using kube-lego, you will want to add:
    ## kubernetes.io/tls-acme: true
    ##
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
    ##
    ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
    annotations:
    #  kubernetes.io/ingress.class: nginx
    #  kubernetes.io/tls-acme: true
db:
  server: va-postgres1-test.c2ngubujml16.ap-southeast-1.rds.amazonaws.com
  rootuser: va_lms
  rootpass: value123
  clientuser: client_env
  clientpass: client123
  serverforceseed: false
  volume_size: "2Gi"
  resources:
    limits:
      memory: "500Mi"
      cpu: "1"
    requests:
      memory: "100Mi"
      cpu: "100m"
  backup:
    restore: false
    restoredw: false
    account: TEST
    accountdw:
    vad:
    lms:
    dw:
    lmsowner1:
    lmsowner2:
    vadowner1:
    vadowner2:
  dw:
    server: va-k8sdb-dw-test.ci1ejznmb8tk.ap-southeast-1.rds.amazonaws.com
    rootuser: va_dw
    rootpass: value123
    clientpass: client123
    volume_size: "2Gi"
    resources:
      limits:
        memory: "500Mi"
        cpu: "1"
      requests:
        memory: "100Mi"
        cpu: "100m"
  kafka_dw:
    volume_size: "4Gi"
  ph:
    server: va-k8sdb-ph-test.ci1ejznmb8tk.ap-southeast-1.rds.amazonaws.com
    rootuser: va_ph
    rootpass: value123
    clientpass: client123
    volume_size: "2Gi"
    resources:
      limits:
        memory: "500Mi"
        cpu: "1"
      requests:
        memory: "100Mi"
        cpu: "100m"


sftp:
  host: 18.136.169.25
twilio:
  id: AC55ce08c98ed46bccf6aa115e31468985
  token: 31465e356bb7cf42b96df263dd7d34b5
mobile:
  app:
    imageurl: "https://s3-ap-southeast-2.amazonaws.com/pgva/images/valuead/logo.jpg"
    button:
      hexcolour: "#cf3734"
    actionbar:
      hexcolour: "#cf3734"


supersetDeployInit:
  image:
    repository: 744687221383.dkr.ecr.ap-southeast-1.amazonaws.com/valuead/k8s-superset-deploy-init
    tag: 2.0.0-b37


supersetLuaProxy:
  image:
    repository: 744687221383.dkr.ecr.ap-southeast-1.amazonaws.com/valuead/k8s-superset-nginx-lua
    tag: 1.0.18
      
superset:
  replicaCount: 1

  ## These requirements are used to build a requirements file which is then applied on init
  ## of superset containers
  additionalRequirements:
    - "psycopg2==2.8.5"
    - "redis==3.2.1"

  ## The name of the secret which we will use to generate a superset_config.py file
  ## Note: this secret must have the key superset_config.py in it and can include other files as well
  ##
  configFromSecret: superset-config
  configPythonFromSecret: superset-python-config

  ## The name of the secret which we will use to populate env vars in deployed pods
  ## This can be useful for secret keys, etc.
  ##
  envFromSecret: superset-env

  ## Extra environment variables that will be passed into pods
  ##
  extraEnv: {}

  configMountPath: "/app/pythonpath"

  image:
    repository: amancevice/superset
    tag: 0.38.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 8088

  ingress:
    enabled: true
    annotations:
      bi:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/affinity: cookie
        nginx.ingress.kubernetes.io/session-cookie-hash: sha1
        nginx.ingress.kubernetes.io/session-cookie-name: route-superset
      superset:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/affinity: cookie
        nginx.ingress.kubernetes.io/session-cookie-hash: sha1
        nginx.ingress.kubernetes.io/session-cookie-name: route-superset

      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - client-uat.test.value-ad.com
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ##

  ##
  ## Init job configuration
  init:
    command:
      - "/bin/sh"
      - "-c"
      - ". {{ .Values.superset.configMountPath }}/superset_bootstrap.sh; . {{ .Values.superset.configMountPath }}/superset_init.sh"
    enabled: true
    loadExamples: true
    initContainers:
      - name: wait-for-postgres
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: DB_PORT
          value: "5432"
        - name: DB_HOST
          value: "{{.Release.Name}}-{{ $.Values.ingress.environment }}-superset-postgres"
        command: [ "/bin/sh", "-c", "until nc -zv $DB_HOST $DB_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
    initscript: |-
      #!/bin/sh
      echo "Upgrading DB schema..."
      superset db upgrade
      echo "Initializing roles..."
      superset init
      echo "Creating admin user..."
      superset fab create-admin \
                      --username admin \
                        --firstname Superset \
                        --lastname Admin \
                        --email admin@superset.com \
                        --password admin || true
      {{ if .Values.superset.init.loadExamples }}
      echo "Loading examples..."
      superset load_examples
      {{- end }}
  ##
  ## Configuration values for the postgresql dependency.
  ## ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
  # postgresql:
  #   ##
  #   ## Use the PostgreSQL chart dependency.
  #   ## Set to false if bringing your own PostgreSQL.
  #   enabled: true

  #   ##
  #   ## The name of an existing secret that contains the postgres password.
  #   existingSecret:

  #   ## Name of the key containing the secret.
  #   existingSecretKey: postgresql-password

  #   ##
  #   ## If you are bringing your own PostgreSQL, you should set postgresHost and
  #   ## also probably service.port, postgresqlUsername, postgresqlPassword, and postgresqlDatabase
  #   ## postgresHost:
  #   ##
  #   ## PostgreSQL port
  #   service:
  #     port: 5432
  #   ## PostgreSQL User to create.
  #   postgresqlUsername: superset
  #   ##
  #   ## PostgreSQL Password for the new user.
  #   ## If not set, a random 10 characters password will be used.
  #   postgresqlPassword: superset
  #   ##
  #   ## PostgreSQL Database to create.
  #   postgresqlDatabase: superset
  #   ##
  #   ## Persistent Volume Storage configuration.
  #   ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  #   persistence:
  #     ##
  #     ## Enable PostgreSQL persistence using Persistent Volume Claims.
  #     enabled: true
  #     ##
  #     ## Persistant class
  #     # storageClass: classname
  #     ##
  #     ## Access modes:
  #     accessModes:
  #       - ReadWriteOnce

  # ## Configuration values for the Redis dependency.
  # ## ref: https://github.com/kubernetes/charts/blob/master/stable/redis/README.md
  # redis:
  #   ##
  #   ## Use the redis chart dependency.
  #   ## Set to false if bringing your own redis.
    # enabled: true

  #   usePassword: false

  #   ##
  #   ## The name of an existing secret that contains the redis password.
  #   existingSecret:

  #   ## Name of the key containing the secret.
  #   existingSecretKey: redis-password

  #   ##
  #   ## If you are bringing your own redis, you can set the host in redisHost.
  #   ## redisHost:
  #   ##
  #   ## Redis password
  #   ##
  #   password: superset
  #   ##
  #   ## Master configuration
  #   master:
  #     ##
  #     ## Image configuration
  #     # image:
  #       ##
  #       ## docker registry secret names (list)
  #       # pullSecrets: nil
  #     ##
  #     ## Configure persistance
  #     persistence:
  #       ##
  #       ## Use a PVC to persist data.
  #       enabled: false
  #       ##
  #       ## Persistant class
  #       # storageClass: classname
  #       ##
  #       ## Access mode:
  #       accessModes:
  #       - ReadWriteOnce
    ##
    ## Disable cluster management by default.
    cluster:
      enabled: false

  nodeSelector: {}

  tolerations: []

  affinity: {}

oauth:
  enabled: false
  auth_api_base_url: https://apisam.uat.income.com.sg/UAT/
  auth_api_key: e1hqEcWyGuanwI2BEqzy19BVCJjYHRZm2WVCUsLV
  client_id: Xha5iOAMLwKuWWfYAepC1MnRGdT
  image:
    backend:
      repository: valuead/k8s-ntuc-oauth-server-backend
      tag: 1.0.6-ABE126-RC10-b31
    frontend:
      repository: valuead/k8s-ntuc-oauth-server-frontend
      tag: 1.0.6-ABE126-RC10-b31
